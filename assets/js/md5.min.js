  function array(b) {
    for (i = 0; i < b; i++) this[i] = 0;
    this.length = b
}

function integer(b) {
    return b % 4294967296
}

function shr(b, f) {
    b = integer(b);
    f = integer(f);
    0 <= b - 2147483648 ? (b = b % 2147483648 >> f, b += 1073741824 >> f - 1) : b >>= f;
    return b
}

function shl1(b) {
    b %= 2147483648;
    b & 1 ? (b = 2 * (b - 1073741824), b += 2147483648) : b *= 2;
    return b
}

function shl(b, f) {
    b = integer(b);
    f = integer(f);
    for (var a = 0; a < f; a++) b = shl1(b);
    return b
}

function and(b, f) {
    b = integer(b);
    f = integer(f);
    var a = b - 2147483648,
        c = f - 2147483648;
    return 0 <= a ? 0 <= c ? (a & c) + 2147483648 : a & f : 0 <= c ? b & c : b & f
}

function or(b, f) {
    b = integer(b);
    f = integer(f);
    var a = b - 2147483648,
        c = f - 2147483648;
    return 0 <= a ? 0 <= c ? (a | c) + 2147483648 : (a | f) + 2147483648 : 0 <= c ? (b | c) + 2147483648 : b | f
}

function xor(b, f) {
    b = integer(b);
    f = integer(f);
    var a = b - 2147483648,
        c = f - 2147483648;
    return 0 <= a ? 0 <= c ? a ^ c : (a ^ f) + 2147483648 : 0 <= c ? (b ^ c) + 2147483648 : b ^ f
}

function not(b) {
    b = integer(b);
    return 4294967295 - b
}
var state = new array(4),
    count = new array(2);
count[0] = 0;
count[1] = 0;
var buffer = new array(64),
    transformBuffer = new array(16),
    digestBits = new array(16),
    S11 = 7,
    S12 = 12,
    S13 = 17,
    S14 = 22,
    S21 = 5,
    S22 = 9,
    S23 = 14,
    S24 = 20,
    S31 = 4,
    S32 = 11,
    S33 = 16,
    S34 = 23,
    S41 = 6,
    S42 = 10,
    S43 = 15,
    S44 = 21;

function F(b, f, a) {
    return or(and(b, f), and(not(b), a))
}

function G(b, f, a) {
    return or(and(b, a), and(f, not(a)))
}

function H(b, f, a) {
    return xor(xor(b, f), a)
}

function I(b, f, a) {
    return xor(f, or(b, not(a)))
}

function rotateLeft(b, f) {
    return or(shl(b, f), shr(b, 32 - f))
}

function FF(b, f, a, c, d, e, g) {
    b = b + F(f, a, c) + d + g;
    b = rotateLeft(b, e);
    return b + f
}

function GG(b, f, a, c, d, e, g) {
    b = b + G(f, a, c) + d + g;
    b = rotateLeft(b, e);
    return b + f
}

function HH(b, f, a, c, d, e, g) {
    b = b + H(f, a, c) + d + g;
    b = rotateLeft(b, e);
    return b + f
}

function II(b, f, a, c, d, e, g) {
    b = b + I(f, a, c) + d + g;
    b = rotateLeft(b, e);
    return b + f
}

function transform(b, f) {
    var a = 0,
        c = 0,
        d = 0,
        e = 0,
        g = transformBuffer,
        a = state[0],
        c = state[1],
        d = state[2],
        e = state[3];
    for (i = 0; 16 > i; i++)
        for (g[i] = and(b[4 * i + f], 255), j = 1; 4 > j; j++) g[i] += shl(and(b[4 * i + j + f], 255), 8 * j);
    a = FF(a, c, d, e, g[0], S11, 3614090360);
    e = FF(e, a, c, d, g[1], S12, 3905402710);
    d = FF(d, e, a, c, g[2], S13, 606105819);
    c = FF(c, d, e, a, g[3], S14, 3250441966);
    a = FF(a, c, d, e, g[4], S11, 4118548399);
    e = FF(e, a, c, d, g[5], S12, 1200080426);
    d = FF(d, e, a, c, g[6], S13, 2821735955);
    c = FF(c, d, e, a, g[7], S14, 4249261313);
    a = FF(a, c, d, e, g[8], S11, 1770035416);
    e = FF(e, a, c, d, g[9], S12, 2336552879);
    d = FF(d, e, a, c, g[10], S13, 4294925233);
    c = FF(c, d, e, a, g[11], S14, 2304563134);
    a = FF(a, c, d, e, g[12], S11, 1804603682);
    e = FF(e, a, c, d, g[13], S12, 4254626195);
    d = FF(d, e, a, c, g[14], S13, 2792965006);
    c = FF(c, d, e, a, g[15], S14, 1236535329);
    a = GG(a, c, d, e, g[1], S21, 4129170786);
    e = GG(e, a, c, d, g[6], S22, 3225465664);
    d = GG(d, e, a, c, g[11], S23, 643717713);
    c = GG(c, d, e, a, g[0], S24, 3921069994);
    a = GG(a, c, d, e, g[5], S21, 3593408605);
    e = GG(e, a, c, d, g[10], S22, 38016083);
    d = GG(d, e, a, c, g[15], S23, 3634488961);
    c = GG(c, d, e, a, g[4], S24,
        3889429448);
    a = GG(a, c, d, e, g[9], S21, 568446438);
    e = GG(e, a, c, d, g[14], S22, 3275163606);
    d = GG(d, e, a, c, g[3], S23, 4107603335);
    c = GG(c, d, e, a, g[8], S24, 1163531501);
    a = GG(a, c, d, e, g[13], S21, 2850285829);
    e = GG(e, a, c, d, g[2], S22, 4243563512);
    d = GG(d, e, a, c, g[7], S23, 1735328473);
    c = GG(c, d, e, a, g[12], S24, 2368359562);
    a = HH(a, c, d, e, g[5], S31, 4294588738);
    e = HH(e, a, c, d, g[8], S32, 2272392833);
    d = HH(d, e, a, c, g[11], S33, 1839030562);
    c = HH(c, d, e, a, g[14], S34, 4259657740);
    a = HH(a, c, d, e, g[1], S31, 2763975236);
    e = HH(e, a, c, d, g[4], S32, 1272893353);
    d = HH(d, e,
        a, c, g[7], S33, 4139469664);
    c = HH(c, d, e, a, g[10], S34, 3200236656);
    a = HH(a, c, d, e, g[13], S31, 681279174);
    e = HH(e, a, c, d, g[0], S32, 3936430074);
    d = HH(d, e, a, c, g[3], S33, 3572445317);
    c = HH(c, d, e, a, g[6], S34, 76029189);
    a = HH(a, c, d, e, g[9], S31, 3654602809);
    e = HH(e, a, c, d, g[12], S32, 3873151461);
    d = HH(d, e, a, c, g[15], S33, 530742520);
    c = HH(c, d, e, a, g[2], S34, 3299628645);
    a = II(a, c, d, e, g[0], S41, 4096336452);
    e = II(e, a, c, d, g[7], S42, 1126891415);
    d = II(d, e, a, c, g[14], S43, 2878612391);
    c = II(c, d, e, a, g[5], S44, 4237533241);
    a = II(a, c, d, e, g[12], S41, 1700485571);
    e = II(e, a, c, d, g[3], S42, 2399980690);
    d = II(d, e, a, c, g[10], S43, 4293915773);
    c = II(c, d, e, a, g[1], S44, 2240044497);
    a = II(a, c, d, e, g[8], S41, 1873313359);
    e = II(e, a, c, d, g[15], S42, 4264355552);
    d = II(d, e, a, c, g[6], S43, 2734768916);
    c = II(c, d, e, a, g[13], S44, 1309151649);
    a = II(a, c, d, e, g[4], S41, 4149444226);
    e = II(e, a, c, d, g[11], S42, 3174756917);
    d = II(d, e, a, c, g[2], S43, 718787259);
    c = II(c, d, e, a, g[9], S44, 3951481745);
    state[0] += a;
    state[1] += c;
    state[2] += d;
    state[3] += e
}

function init() {
    count[0] = count[1] = 0;
    state[0] = 1732584193;
    state[1] = 4023233417;
    state[2] = 2562383102;
    state[3] = 271733878;
    for (i = 0; i < digestBits.length; i++) digestBits[i] = 0
}
function randomString(length, chars) {
    var result = '';
    for (var i = length; i > 0; --i) result += chars[Math.round(Math.random() * (chars.length - 1))];
    return result;
}
function md5init() {
    var b = $("#name").val(),
        f = MD5(b),
        a = $("#pass").val(),
        c = MD5(a),
	g = randomString(16, '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'),
	
		h=MD5(g);
		i=c.concat(h),
        b = window.btoa(b),
        a = window.btoa(a),
		a = b.concat("@").concat(a).concat(g),
        a = window.btoa(a);
    $("#name").val(f);
    $("#pass").val(c);
	
    $("#lang").val(a)
}

function update(b) {
    var f;
    f = and(shr(count[0], 3), 63);
    4294967288 > count[0] || (count[1]++, count[0] -= 4294967296);
    count[0] += 8;
    buffer[f] = and(b, 255);
    63 <= f && transform(buffer, 0)
}

function finish() {
    for (var b = new array(8), f, a = 0, c = f = 0, a = 0; 4 > a; a++) b[a] = and(shr(count[0], 8 * a), 255);
    for (a = 0; 4 > a; a++) b[a + 4] = and(shr(count[1], 8 * a), 255);
    f = and(shr(count[0], 3), 63);
    c = 56 > f ? 56 - f : 120 - f;
    f = new array(64);
    f[0] = 128;
    for (a = 0; a < c; a++) update(f[a]);
    for (a = 0; 8 > a; a++) update(b[a]);
    for (a = 0; 4 > a; a++)
        for (j = 0; 4 > j; j++) digestBits[4 * a + j] = and(shr(state[a], 8 * j), 255)
}

function hexa(b) {
    var f = "";
    for (hexa_i = 0; 8 > hexa_i; hexa_i++) f = "0123456789abcdef".charAt(Math.abs(b) % 16) + f, b = Math.floor(b / 16);
    return f
}
var ascii = "01234567890123456789012345678901 !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~";

function MD5(b) {
    var f, a, c;
    init();
    for (a = 0; a < b.length; a++) f = b.charAt(a), update(ascii.lastIndexOf(f));
    finish();
    for (i = b = f = a = c = 0; 4 > i; i++) b += shl(digestBits[15 - i], 8 * i);
    for (i = 4; 8 > i; i++) f += shl(digestBits[15 - i], 8 * (i - 4));
    for (i = 8; 12 > i; i++) a += shl(digestBits[15 - i], 8 * (i - 8));
    for (i = 12; 16 > i; i++) c += shl(digestBits[15 - i], 8 * (i - 12));
    return hexa(c) + hexa(a) + hexa(f) + hexa(b)
};
